/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module alu_10 (
    input [5:0] alufn,
    input [15:0] a,
    input [15:0] b,
    output reg [15:0] out,
    output reg zout,
    output reg vout,
    output reg nout,
    output reg error
  );
  
  
  
  wire [16-1:0] M_adderunit_out;
  wire [1-1:0] M_adderunit_z;
  wire [1-1:0] M_adderunit_v;
  wire [1-1:0] M_adderunit_n;
  wire [1-1:0] M_adderunit_error;
  reg [16-1:0] M_adderunit_a;
  reg [16-1:0] M_adderunit_b;
  reg [6-1:0] M_adderunit_alufn;
  adder_21 adderunit (
    .a(M_adderunit_a),
    .b(M_adderunit_b),
    .alufn(M_adderunit_alufn),
    .out(M_adderunit_out),
    .z(M_adderunit_z),
    .v(M_adderunit_v),
    .n(M_adderunit_n),
    .error(M_adderunit_error)
  );
  
  wire [16-1:0] M_compareunit_out;
  reg [16-1:0] M_compareunit_a;
  reg [16-1:0] M_compareunit_b;
  reg [6-1:0] M_compareunit_alu_fn;
  compare_22 compareunit (
    .a(M_compareunit_a),
    .b(M_compareunit_b),
    .alu_fn(M_compareunit_alu_fn),
    .out(M_compareunit_out)
  );
  
  wire [16-1:0] M_shifterunit_out;
  reg [16-1:0] M_shifterunit_a;
  reg [16-1:0] M_shifterunit_b;
  reg [6-1:0] M_shifterunit_alufn;
  shifter_23 shifterunit (
    .a(M_shifterunit_a),
    .b(M_shifterunit_b),
    .alufn(M_shifterunit_alufn),
    .out(M_shifterunit_out)
  );
  
  wire [16-1:0] M_booleanunit_boole;
  reg [6-1:0] M_booleanunit_alu_fn;
  reg [16-1:0] M_booleanunit_a;
  reg [16-1:0] M_booleanunit_b;
  boolean_24 booleanunit (
    .alu_fn(M_booleanunit_alu_fn),
    .a(M_booleanunit_a),
    .b(M_booleanunit_b),
    .boole(M_booleanunit_boole)
  );
  
  always @* begin
    out = 16'h0000;
    error = 1'h0;
    M_adderunit_a = a;
    M_adderunit_b = b;
    M_adderunit_alufn = alufn;
    M_booleanunit_a = a;
    M_booleanunit_b = b;
    M_booleanunit_alu_fn = alufn;
    M_shifterunit_a = a;
    M_shifterunit_b = b;
    M_shifterunit_alufn = alufn;
    M_compareunit_a = a;
    M_compareunit_b = b;
    M_compareunit_alu_fn = alufn;
    
    case (alufn[4+1-:2])
      2'h0: begin
        out = M_adderunit_out;
        error = M_adderunit_error;
      end
      2'h1: begin
        out = M_booleanunit_boole;
      end
      2'h2: begin
        out = M_shifterunit_out;
      end
      2'h3: begin
        out = M_compareunit_out;
      end
    endcase
    zout = M_adderunit_z;
    vout = M_adderunit_v;
    nout = M_adderunit_n;
  end
endmodule
