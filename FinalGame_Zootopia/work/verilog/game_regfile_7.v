/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module game_regfile_7 (
    input clk,
    input rst,
    input we,
    input [15:0] data,
    input [3:0] ra,
    input [3:0] rb,
    input [3:0] rc,
    output reg [15:0] out_a,
    output reg [15:0] out_b,
    output reg [3:0] correct_count_out,
    output reg [1:0] lives_count_out,
    output reg [4:0] question0_out,
    output reg [4:0] question1_out,
    output reg [4:0] question2_out,
    output reg [4:0] question3_out,
    output reg [4:0] question4_out,
    output reg [4:0] display_state_out,
    input [0:0] onoff_in,
    output reg [0:0] onoff_out
  );
  
  
  
  reg [4:0] M_display_state_d, M_display_state_q = 5'h00;
  reg [4:0] M_current_input_d, M_current_input_q = 5'h00;
  reg [4:0] M_question0_d, M_question0_q = 1'h0;
  reg [4:0] M_question1_d, M_question1_q = 1'h0;
  reg [4:0] M_question2_d, M_question2_q = 1'h0;
  reg [4:0] M_question3_d, M_question3_q = 1'h0;
  reg [4:0] M_question4_d, M_question4_q = 1'h0;
  reg [1:0] M_lives_d, M_lives_q = 2'h3;
  reg [0:0] M_out_d, M_out_q = 1'h0;
  reg [0:0] M_off_d, M_off_q = 1'h0;
  reg [3:0] M_rng_value_d, M_rng_value_q = 1'h0;
  reg [3:0] M_correct_count_d, M_correct_count_q = 1'h0;
  reg [4:0] M_ctr_d, M_ctr_q = 1'h0;
  
  always @* begin
    M_ctr_d = M_ctr_q;
    M_lives_d = M_lives_q;
    M_display_state_d = M_display_state_q;
    M_question3_d = M_question3_q;
    M_question2_d = M_question2_q;
    M_question4_d = M_question4_q;
    M_question1_d = M_question1_q;
    M_off_d = M_off_q;
    M_question0_d = M_question0_q;
    M_out_d = M_out_q;
    M_correct_count_d = M_correct_count_q;
    M_current_input_d = M_current_input_q;
    M_rng_value_d = M_rng_value_q;
    
    if (we) begin
      
      case (rc)
        4'h0: begin
          M_question0_d = data;
        end
        4'h1: begin
          M_question1_d = data;
        end
        4'h2: begin
          M_question2_d = data;
        end
        4'h3: begin
          M_question3_d = data;
        end
        4'h4: begin
          M_question4_d = data;
        end
        4'h5: begin
          M_current_input_d = data;
        end
        4'h6: begin
          M_ctr_d = data;
        end
        4'h7: begin
          M_out_d = data;
        end
        4'h8: begin
          M_correct_count_d = data;
        end
        4'h9: begin
          M_display_state_d = data;
        end
        4'ha: begin
          M_rng_value_d = data;
        end
        4'hb: begin
          M_lives_d = data;
        end
      endcase
    end
    
    case (ra)
      4'h0: begin
        out_a = M_question0_q;
      end
      4'h1: begin
        out_a = M_question1_q;
      end
      4'h2: begin
        out_a = M_question2_q;
      end
      4'h3: begin
        out_a = M_question3_q;
      end
      4'h4: begin
        out_a = M_question4_q;
      end
      4'h5: begin
        out_a = M_current_input_q;
      end
      4'h6: begin
        out_a = M_ctr_q;
      end
      4'h7: begin
        out_a = M_out_q;
      end
      4'h8: begin
        out_a = M_correct_count_q;
      end
      4'h9: begin
        out_a = M_display_state_q;
      end
      4'ha: begin
        out_a = M_rng_value_q;
      end
      4'hb: begin
        out_a = M_lives_q;
      end
      default: begin
        out_a = 1'h0;
      end
    endcase
    
    case (rb)
      4'h0: begin
        out_b = M_question0_q;
      end
      4'h1: begin
        out_b = M_question1_q;
      end
      4'h2: begin
        out_b = M_question2_q;
      end
      4'h3: begin
        out_b = M_question3_q;
      end
      4'h4: begin
        out_b = M_question4_q;
      end
      4'h5: begin
        out_b = M_current_input_q;
      end
      4'h6: begin
        out_b = M_ctr_q;
      end
      4'h7: begin
        out_b = M_out_q;
      end
      4'h8: begin
        out_b = M_correct_count_q;
      end
      4'h9: begin
        out_b = M_display_state_q;
      end
      4'ha: begin
        out_b = M_rng_value_q;
      end
      4'hb: begin
        out_b = M_lives_q;
      end
      default: begin
        out_b = 1'h0;
      end
    endcase
    lives_count_out = M_lives_q;
    question0_out = M_question0_q;
    question1_out = M_question1_q;
    question2_out = M_question2_q;
    question3_out = M_question3_q;
    question4_out = M_question4_q;
    display_state_out = M_display_state_q;
    correct_count_out = M_correct_count_q;
    M_off_d = onoff_in;
    onoff_out = M_off_q;
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_display_state_q <= 5'h00;
      M_current_input_q <= 5'h00;
      M_question0_q <= 1'h0;
      M_question1_q <= 1'h0;
      M_question2_q <= 1'h0;
      M_question3_q <= 1'h0;
      M_question4_q <= 1'h0;
      M_lives_q <= 2'h3;
      M_out_q <= 1'h0;
      M_off_q <= 1'h0;
      M_rng_value_q <= 1'h0;
      M_correct_count_q <= 1'h0;
      M_ctr_q <= 1'h0;
    end else begin
      M_display_state_q <= M_display_state_d;
      M_current_input_q <= M_current_input_d;
      M_question0_q <= M_question0_d;
      M_question1_q <= M_question1_d;
      M_question2_q <= M_question2_d;
      M_question3_q <= M_question3_d;
      M_question4_q <= M_question4_d;
      M_lives_q <= M_lives_d;
      M_out_q <= M_out_d;
      M_off_q <= M_off_d;
      M_rng_value_q <= M_rng_value_d;
      M_correct_count_q <= M_correct_count_d;
      M_ctr_q <= M_ctr_d;
    end
  end
  
endmodule
